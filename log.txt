    Blocking waiting for file lock on build directory
   Compiling pwiki-api v0.0.0 (/Users/nikky/dev/rust/pwiki-dose-graph/pwiki-api)
warning: unused import: `structure::Substance`
 --> pwiki-api/src/query.rs:3:30
  |
3 | use crate::{error::ApiError, structure::Substance};
  |                              ^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: associated function `substance_data` is never used
  --> pwiki-api/src/query.rs:27:18
   |
27 |     pub async fn substance_data(
   |                  ^^^^^^^^^^^^^^
   |
   = note: `#[warn(dead_code)]` on by default

warning: associated function `name` is never used
  --> pwiki-api/src/query.rs:55:12
   |
55 |     pub fn name(&self) -> String {
   |            ^^^^

warning: associated function `routes_of_administration` is never used
  --> pwiki-api/src/query.rs:59:12
   |
59 |     pub fn routes_of_administration(&self) -> Vec<substance_query::SubstanceQuerySubstancesRoas> {
   |            ^^^^^^^^^^^^^^^^^^^^^^^^

warning: associated function `uncertain_interactions` is never used
  --> pwiki-api/src/query.rs:63:12
   |
63 |     pub fn uncertain_interactions(
   |            ^^^^^^^^^^^^^^^^^^^^^^

warning: associated function `unsafe_interactions` is never used
  --> pwiki-api/src/query.rs:72:12
   |
72 |     pub fn unsafe_interactions(
   |            ^^^^^^^^^^^^^^^^^^^

warning: associated function `dangerous_interactions` is never used
  --> pwiki-api/src/query.rs:81:12
   |
81 |     pub fn dangerous_interactions(
   |            ^^^^^^^^^^^^^^^^^^^^^^

warning: associated function `new` is never used
  --> pwiki-api/src/error.rs:10:12
   |
10 |     pub fn new(messages: Vec<String>) -> Self {
   |            ^^^

warning: type alias `DoseRange` is never used
 --> pwiki-api/src/structure.rs:1:10
  |
1 | pub type DoseRange = std::ops::Range<f32>;
  |          ^^^^^^^^^

warning: struct `Substance` is never constructed
 --> pwiki-api/src/structure.rs:3:12
  |
3 | pub struct Substance {
  |            ^^^^^^^^^

warning: struct `RoutesOfAdministration` is never constructed
  --> pwiki-api/src/structure.rs:12:12
   |
12 | pub struct RoutesOfAdministration {
   |            ^^^^^^^^^^^^^^^^^^^^^^

warning: struct `Dose` is never constructed
  --> pwiki-api/src/structure.rs:18:12
   |
18 | pub struct Dose {
   |            ^^^^

warning: enum `DoseUnits` is never used
  --> pwiki-api/src/structure.rs:27:10
   |
27 | pub enum DoseUnits {
   |          ^^^^^^^^^

warning: struct `Duration` is never constructed
  --> pwiki-api/src/structure.rs:33:12
   |
33 | pub struct Duration {
   |            ^^^^^^^^

warning: struct `UncertainInteraction` is never constructed
  --> pwiki-api/src/structure.rs:43:12
   |
43 | pub struct UncertainInteraction {
   |            ^^^^^^^^^^^^^^^^^^^^

warning: struct `UnsafeInteraction` is never constructed
  --> pwiki-api/src/structure.rs:47:12
   |
47 | pub struct UnsafeInteraction {
   |            ^^^^^^^^^^^^^^^^^

warning: struct `DangerousInteraction` is never constructed
  --> pwiki-api/src/structure.rs:51:12
   |
51 | pub struct DangerousInteraction {
   |            ^^^^^^^^^^^^^^^^^^^^

warning: associated function `name` is never used
  --> pwiki-api/src/query.rs:55:12
   |
55 |     pub fn name(&self) -> String {
   |            ^^^^
   |
   = note: `#[warn(dead_code)]` on by default

warning: `pwiki-api` (lib) generated 17 warnings
warning: `pwiki-api` (lib test) generated 15 warnings (14 duplicates)
    Finished test [unoptimized + debuginfo] target(s) in 2.31s
     Running unittests src/lib.rs (/Users/nikky/dev/rust/pwiki-dose-graph/target/debug/deps/pwiki_api-6eac0e74932cee4d)

running 1 test
[pwiki-api/src/query.rs:125] SubstanceQuery::substance_data("2C-B").await.unwrap().data.unwrap().substances()[0].clone() = SubstanceQuerySubstances {
    name: Some(
        "2C-B",
    ),
    roas: Some(
        [
            Some(
                SubstanceQuerySubstancesRoas {
                    name: Some(
                        "insufflated",
                    ),
                    dose: Some(
                        SubstanceQuerySubstancesRoasDose {
                            units: Some(
                                "mg",
                            ),
                            threshold: Some(
                                1.0,
                            ),
                            heavy: Some(
                                23.0,
                            ),
                            common: Some(
                                SubstanceQuerySubstancesRoasDoseCommon {
                                    min: Some(
                                        8.0,
                                    ),
                                    max: Some(
                                        12.0,
                                    ),
                                },
                            ),
                            light: Some(
                                SubstanceQuerySubstancesRoasDoseLight {
                                    min: Some(
                                        5.0,
                                    ),
                                    max: Some(
                                        8.0,
                                    ),
                                },
                            ),
                            strong: Some(
                                SubstanceQuerySubstancesRoasDoseStrong {
                                    min: Some(
                                        12.0,
                                    ),
                                    max: Some(
                                        23.0,
                                    ),
                                },
                            ),
                        },
                    ),
                    duration: Some(
                        SubstanceQuerySubstancesRoasDuration {
                            afterglow: None,
                            comeup: None,
                            duration: None,
                            offset: None,
                            onset: Some(
                                SubstanceQuerySubstancesRoasDurationOnset {
                                    min: Some(
                                        0.0,
                                    ),
                                    max: Some(
                                        20.0,
                                    ),
                                    units: Some(
                                        "minutes",
                                    ),
                                },
                            ),
                            peak: None,
                            total: Some(
                                SubstanceQuerySubstancesRoasDurationTotal {
                                    min: Some(
                                        4.0,
                                    ),
                                    max: Some(
                                        7.0,
                                    ),
                                    units: Some(
                                        "hours",
                                    ),
                                },
                            ),
                        },
                    ),
                },
            ),
            Some(
                SubstanceQuerySubstancesRoas {
                    name: Some(
                        "oral",
                    ),
                    dose: Some(
                        SubstanceQuerySubstancesRoasDose {
                            units: Some(
                                "mg",
                            ),
                            threshold: Some(
                                5.0,
                            ),
                            heavy: Some(
                                45.0,
                            ),
                            common: Some(
                                SubstanceQuerySubstancesRoasDoseCommon {
                                    min: Some(
                                        15.0,
                                    ),
                                    max: Some(
                                        25.0,
                                    ),
                                },
                            ),
                            light: Some(
                                SubstanceQuerySubstancesRoasDoseLight {
                                    min: Some(
                                        10.0,
                                    ),
                                    max: Some(
                                        15.0,
                                    ),
                                },
                            ),
                            strong: Some(
                                SubstanceQuerySubstancesRoasDoseStrong {
                                    min: Some(
                                        25.0,
                                    ),
                                    max: Some(
                                        45.0,
                                    ),
                                },
                            ),
                        },
                    ),
                    duration: Some(
                        SubstanceQuerySubstancesRoasDuration {
                            afterglow: Some(
                                SubstanceQuerySubstancesRoasDurationAfterglow {
                                    min: Some(
                                        2.0,
                                    ),
                                    max: Some(
                                        4.0,
                                    ),
                                    units: Some(
                                        "hours",
                                    ),
                                },
                            ),
                            comeup: Some(
                                SubstanceQuerySubstancesRoasDurationComeup {
                                    min: Some(
                                        40.0,
                                    ),
                                    max: Some(
                                        60.0,
                                    ),
                                    units: Some(
                                        "minutes",
                                    ),
                                },
                            ),
                            duration: None,
                            offset: Some(
                                SubstanceQuerySubstancesRoasDurationOffset {
                                    min: Some(
                                        1.5,
                                    ),
                                    max: Some(
                                        3.0,
                                    ),
                                    units: Some(
                                        "hours",
                                    ),
                                },
                            ),
                            onset: Some(
                                SubstanceQuerySubstancesRoasDurationOnset {
                                    min: Some(
                                        20.0,
                                    ),
                                    max: Some(
                                        40.0,
                                    ),
                                    units: Some(
                                        "minutes",
                                    ),
                                },
                            ),
                            peak: Some(
                                SubstanceQuerySubstancesRoasDurationPeak {
                                    min: Some(
                                        2.0,
                                    ),
                                    max: Some(
                                        3.0,
                                    ),
                                    units: Some(
                                        "hours",
                                    ),
                                },
                            ),
                            total: Some(
                                SubstanceQuerySubstancesRoasDurationTotal {
                                    min: Some(
                                        5.0,
                                    ),
                                    max: Some(
                                        8.0,
                                    ),
                                    units: Some(
                                        "hours",
                                    ),
                                },
                            ),
                        },
                    ),
                },
            ),
            Some(
                SubstanceQuerySubstancesRoas {
                    name: Some(
                        "rectal",
                    ),
                    dose: Some(
                        SubstanceQuerySubstancesRoasDose {
                            units: Some(
                                "mg",
                            ),
                            threshold: Some(
                                1.0,
                            ),
                            heavy: Some(
                                23.0,
                            ),
                            common: Some(
                                SubstanceQuerySubstancesRoasDoseCommon {
                                    min: Some(
                                        8.0,
                                    ),
                                    max: Some(
                                        12.0,
                                    ),
                                },
                            ),
                            light: Some(
                                SubstanceQuerySubstancesRoasDoseLight {
                                    min: Some(
                                        5.0,
                                    ),
                                    max: Some(
                                        8.0,
                                    ),
                                },
                            ),
                            strong: Some(
                                SubstanceQuerySubstancesRoasDoseStrong {
                                    min: Some(
                                        12.0,
                                    ),
                                    max: Some(
                                        23.0,
                                    ),
                                },
                            ),
                        },
                    ),
                    duration: Some(
                        SubstanceQuerySubstancesRoasDuration {
                            afterglow: None,
                            comeup: None,
                            duration: None,
                            offset: None,
                            onset: Some(
                                SubstanceQuerySubstancesRoasDurationOnset {
                                    min: Some(
                                        0.0,
                                    ),
                                    max: Some(
                                        20.0,
                                    ),
                                    units: Some(
                                        "minutes",
                                    ),
                                },
                            ),
                            peak: None,
                            total: Some(
                                SubstanceQuerySubstancesRoasDurationTotal {
                                    min: Some(
                                        4.0,
                                    ),
                                    max: Some(
                                        7.0,
                                    ),
                                    units: Some(
                                        "hours",
                                    ),
                                },
                            ),
                        },
                    ),
                },
            ),
        ],
    ),
    cross_tolerances: None,
    uncertain_interactions: Some(
        [
            Some(
                SubstanceQuerySubstancesUncertainInteractions {
                    name: Some(
                        "Cannabis",
                    ),
                },
            ),
            Some(
                SubstanceQuerySubstancesUncertainInteractions {
                    name: Some(
                        "Stimulants",
                    ),
                },
            ),
        ],
    ),
    unsafe_interactions: Some(
        [
            Some(
                SubstanceQuerySubstancesUnsafeInteractions {
                    name: Some(
                        "Tramadol",
                    ),
                },
            ),
        ],
    ),
    dangerous_interactions: Some(
        [
            Some(
                SubstanceQuerySubstancesDangerousInteractions {
                    name: Some(
                        "Lithium",
                    ),
                },
            ),
        ],
    ),
}
test query::test::test_query ... ok

test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.30s

   Doc-tests pwiki-api

running 0 tests

test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s

